{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number to computer the factorial8\n",
      "40320\n"
     ]
    }
   ],
   "source": [
    "\n",
    "#Question No. 01\n",
    "def factorial(num):\n",
    "    if num == 0:\n",
    "        return 1\n",
    "    else:\n",
    "        return num *factorial(num-1)\n",
    "num=int(input(\"Enter the number to computer the factorial\"))\n",
    "arg=factorial(num)\n",
    "print(arg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Plz enter your text to check upper and lower casei m in karachi\n",
      "Your Text in Orignal Condition :  i m in karachi\n",
      "No. of Upper case characters :  0\n",
      "No. of Lower case Characters :  11\n"
     ]
    }
   ],
   "source": [
    "#Question No. 2\n",
    "def string(se):\n",
    "    d={\n",
    "        \"UPPER\":0,\n",
    "        \"LOWER\":0\n",
    "    }\n",
    "    for c in se:\n",
    "        if c.isupper():\n",
    "           d[\"UPPER\"]+=1\n",
    "        elif c.islower():\n",
    "           d[\"LOWER\"]+=1\n",
    "        else:\n",
    "           pass\n",
    "    print (\"Your Text in Orignal Condition : \", se)\n",
    "    print (\"No. of Upper case characters : \", d[\"UPPER\"])\n",
    "    print (\"No. of Lower case Characters : \", d[\"LOWER\"])\n",
    "test=input(\"Plz enter your text to check upper and lower case\")\n",
    "string(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 6, 8]\n"
     ]
    }
   ],
   "source": [
    "#Question no. 03\n",
    "def even_num(l):\n",
    "    enum = []\n",
    "    for n in l:\n",
    "        if n % 2 == 0:\n",
    "            enum.append(n)\n",
    "    return enum\n",
    "print(even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "True\n"
     ]
    }
   ],
   "source": [
    "#Question no. 4\n",
    "def Palindrome(string):\n",
    "    left_pos = 0\n",
    "    right_pos = len(string) - 1\n",
    "\n",
    "    while right_pos >= left_pos:\n",
    "        if not string[left_pos] == string[right_pos]:\n",
    "            return False\n",
    "        left_pos += 1\n",
    "        right_pos -= 1\n",
    "    return True\n",
    "print(Palindrome('aza'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the number875\n",
      "not prime\n"
     ]
    }
   ],
   "source": [
    "#Question No. 5\n",
    "def prime(num):\n",
    "    if (num==1):\n",
    "        return \"not prime\"\n",
    "    elif (num==2):\n",
    "        return \"Prime\";\n",
    "    else:\n",
    "        for x in range(2, num):\n",
    "            if(num % x==0):\n",
    "                return \"not prime\"\n",
    "        return \"Prime\"  \n",
    "\n",
    "z=int(input(\"Enter the number\"))\n",
    "print(prime(z))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Your Shopping List :\n",
      " Wheat\n",
      " rice\n",
      " Salt\n",
      "meat\n",
      " Milk\n",
      "Tomato\n"
     ]
    }
   ],
   "source": [
    "#Question no. 6\n",
    "print(\"Your Shopping List :\" ,)\n",
    "def shop(*products):\n",
    "    for product in products:\n",
    "           print(product)\n",
    "\n",
    "shop(\" Wheat\" , \" rice\" , \" Salt\" , \"meat\" , \" Milk\" , \"Tomato\" )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
